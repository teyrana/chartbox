// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CELLCACHE_CHARTBOX_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_CELLCACHE_CHARTBOX_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace chartbox {
namespace flatbuffer {

struct Location;

struct Cell;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Location FLATBUFFERS_FINAL_CLASS {
 private:
  float easting_;
  float northing_;

 public:
  Location() {
    memset(static_cast<void *>(this), 0, sizeof(Location));
  }
  Location(float _easting, float _northing)
      : easting_(flatbuffers::EndianScalar(_easting)),
        northing_(flatbuffers::EndianScalar(_northing)) {
  }
  float easting() const {
    return flatbuffers::EndianScalar(easting_);
  }
  float northing() const {
    return flatbuffers::EndianScalar(northing_);
  }
};
FLATBUFFERS_STRUCT_END(Location, 8);

struct Cell FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGIN = 4,
    VT_HEIGHT = 6,
    VT_WIDTH = 8,
    VT_DATA = 10
  };
  const Location *origin() const {
    return GetStruct<const Location *>(VT_ORIGIN);
  }
  uint16_t height() const {
    return GetField<uint16_t>(VT_HEIGHT, 0);
  }
  uint16_t width() const {
    return GetField<uint16_t>(VT_WIDTH, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Location>(verifier, VT_ORIGIN) &&
           VerifyField<uint16_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint16_t>(verifier, VT_WIDTH) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct CellBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_origin(const Location *origin) {
    fbb_.AddStruct(Cell::VT_ORIGIN, origin);
  }
  void add_height(uint16_t height) {
    fbb_.AddElement<uint16_t>(Cell::VT_HEIGHT, height, 0);
  }
  void add_width(uint16_t width) {
    fbb_.AddElement<uint16_t>(Cell::VT_WIDTH, width, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Cell::VT_DATA, data);
  }
  explicit CellBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CellBuilder &operator=(const CellBuilder &);
  flatbuffers::Offset<Cell> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cell>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cell> CreateCell(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Location *origin = 0,
    uint16_t height = 0,
    uint16_t width = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  CellBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_origin(origin);
  builder_.add_width(width);
  builder_.add_height(height);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cell> CreateCellDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Location *origin = 0,
    uint16_t height = 0,
    uint16_t width = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return chartbox::flatbuffer::CreateCell(
      _fbb,
      origin,
      height,
      width,
      data__);
}

inline const chartbox::flatbuffer::Cell *GetCell(const void *buf) {
  return flatbuffers::GetRoot<chartbox::flatbuffer::Cell>(buf);
}

inline const chartbox::flatbuffer::Cell *GetSizePrefixedCell(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<chartbox::flatbuffer::Cell>(buf);
}

inline bool VerifyCellBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<chartbox::flatbuffer::Cell>(nullptr);
}

inline bool VerifySizePrefixedCellBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<chartbox::flatbuffer::Cell>(nullptr);
}

inline void FinishCellBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<chartbox::flatbuffer::Cell> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCellBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<chartbox::flatbuffer::Cell> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuffer
}  // namespace chartbox

#endif  // FLATBUFFERS_GENERATED_CELLCACHE_CHARTBOX_FLATBUFFER_H_
